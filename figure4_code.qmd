---
title: "figure_4"
author: "vb"
format: html
editor: visual
---

## nuclei vs estimated cell number

### functions and library

```{r}

#libraries
library(tidyverse)
library(future)
library(here)

library(EBImage)
library(imager)
library(imagerExtra)
library(magick)

#sources
source("R/cropping.R")
source("R/get_features")
source("R/get_tesselation")
source("R/iterating")


```

## C2C12

### C2C12 Prepare filepaths brightfield

```{r}

# manual folder labeling
my_root_folder <- 
  "/Users/vincentdeboer/Documents/R"
my_project_folder <- 
  "segement_me_label_free"
my_data_folder <- "data"

# generate file list for C2C12 BF images
wellnames_96_withoutzero <- 
  expand.grid(row = LETTERS[1:8], 
              col = c(1:12)) %>% 
  mutate(well = paste0(row,  col)) %>% 
  pull(well)

C2C12_1207_files <- 
  paste0("20221207_1700_gt_", 
         wellnames_96_withoutzero, 
         "_EXP4_BF.tif")

path_names_C2C12 <- 
  C2C12_1207_files %>% 
  as_tibble() %>% 
  rename(filename = value) %>% 
  mutate(well = substring(filename, 18,20)) %>% 
  mutate(folder = my_data_folder) %>% 
  mutate(path_name = 
           here::here(my_root_folder, 
                      my_project_folder,
                      my_data_folder, 
                      filename))

```

### C2C12 Prepare filepaths Hoechst nuclei staining

```{r}


C2C12_1207_files_DAPI <- paste0("20221207_1700_gt_", 
                                wellnames_96_withoutzero, 
                                "_EXP4_DAPI.tif")

path_names_C2C12 <- 
  C2C12_1207_files_DAPI %>% 
  as_tibble() %>% 
  rename(filename = value) %>% 
  mutate(well = substring(filename, 18,20)) %>% 
  mutate(folder = my_data_folder) %>% 
  mutate(path_name = 
           here::here(my_root_folder, 
                      my_project_folder,
                      my_data_folder, 
                      filename))

future::plan(future::multisession, workers = 10)

```

### C2C12 nuclei counts

```{r}

features_C2C12_1207_DAPI_pipe <- C2C12_1207_pathnames_DAPI %>% 
    furrr::future_map2(.x = .$path_name,
               .y = .$filename,
               .f = ~ .x %>% 
                 EBImage::readImage() %>%
                 percentage_crop() %>% 
                 get_nuclei(.y) %>% 
                 get_nuclei_features_fancy(.y)) %>% 
    list_rbind()


n_cells_C2C12_1207 <- features_C2C12_1207_DAPI_pipe %>% 
  summarize(n = n(), .by = c("file"))



```

### C2C12 set parameters for iteration in pmap

```{r}

#get image dimensions
my_crop_percentage = 0.05

pixset_dims <- path_names_C2C12$path_name %>% 
  pluck(1) %>% 
  EBImage::readImage() %>%
  percentage_crop(crop_percentage = 
                    my_crop_percentage) %>% 
  dim()

#define parameter set
my_isoblur <- c(0,1)
my_grow <- c(0,1,2)
my_shrink <- c(3,4,5,6)
my_k <- c(0.1) #for thp1 and c2c12 no 0.01
my_ws <- c(39, 99, 201)
my_clean <- c(0, 1, 2)

param_set <- expand_grid(
          path_name = 
            path_names_C2C12$path_name,
          my_isoblur,
          my_grow,
          my_shrink,
          my_k,
          my_ws,
          my_clean)

total_iterations <- nrow(param_set)

paste0("around ", total_iterations/400, " minutes to run")

future::plan(future::multisession, workers = 10)

```

### C2C12 Run iteration function

::: {.callout-warnign}
Note that the below iteration runs in 50 minutes on a Apple M2-pro. This can take longer on other configurations
:::

```{r}

params_results_c2c12 <- 
  list(file_name = param_set$path_name, 
       .i = param_set$my_isoblur,
       .j = param_set$my_grow,
       .k = param_set$my_shrink,
       .l = param_set$my_k,
       .m = param_set$my_ws,
       .n = param_set$my_clean) %>% 
  furrr::future_pmap(
    .l = .,
    .f = function(file_name, .i, .j, .k, .l, .m, .n) 
      file_name %>%
      my_loop_function(well_name = basename(.),
                       i = .i, j = .j, k = .k, l = .l, m = .m, n = .n,
                       crop_percentage = my_crop_percentage), 
    .options = furrr::furrr_options(seed = NULL)) %>%
    list_rbind() 

```


### C2C12 image and plate annotation

```{r}

plate_id <- "c2c12_1207"

c2c12_1207_groups <-
  tibble(
    well =
      expand.grid(
        row = LETTERS[1:8],
        col = c(1:12)) %>%
        mutate(
          well =
            case_when(
              nchar(col) == 1 ~ paste0(row, "0", col),
              TRUE ~ paste0(row, col))) %>%
        pull(well),
    group = rep(LETTERS[1:6], each = 16),
    plate_id = plate_id) %>%
  mutate(
    group =
      case_when(
        well %in% c("A01", "A12", "H01", "H12") ~ "Background",
        TRUE ~ group)) %>%
  mutate(
    group =
      case_when(group == "A" ~ "1000 cells/well",
        group == "B" ~ "5000 cells/well",
        group == "C" ~ "7500 cells/well",
        group == "D" ~ "10000 cells/well",
        group == "E" ~ "12500 cells/well",
        group == "F" ~ "15000 cells/well",
        .default = group))
```

### C2C12 annotate the results

```{r}
params_results_c2c12_annotated <-
  params_results_c2c12 %>%
    mutate(well = str_sub(file_name, 18, 20)) %>%
    mutate(well = case_when(
      str_detect(well, "_") ~ paste0(
        str_sub(well, 1, 1), "0",
        str_sub(well, 2, 2)),
      .default = well)) %>%
    mutate(id = str_sub(file_name, 1, -8)) %>%
    left_join(n_cells_C2C12_1207 %>%
    mutate(id = str_sub(file, 1, -10)), by = c("id")) %>%
    left_join(c2c12_1207_groups, by = c("well")) %>%
    mutate(cell_number_group = parse_number(group, na = c("Background"))) %>%
    mutate(cell_number_group = case_when(is.na(cell_number_group) ~ 0,
      .default = cell_number_group)) %>%
    mutate(cell_size_xpol = case_when(cell_number_group == 1000 ~ 432, # 432
      cell_number_group == 5000 ~ 432, # 432
      cell_number_group == 7500 ~ 325, # 325
      cell_number_group == 10000 ~ 267, # 267
      cell_number_group == 12500 ~ 263, # 263
      cell_number_group == 15000 ~ 260, # 260
      .default = 115)) %>%
    rename(nuclei = n)

# please note that for each cell density the cell size
# was estimated using the shiny app on single images

```

### C2C12 summarize the data

```{r}

summarized_c2c12 <- params_results_c2c12_annotated %>%
  # slice_head(n = 1, by = c(my_mean_G2, my_seed_max_area)) %>%
  mutate(distance_mean = (my_mean_G3 - cell_size_xpol)) %>%
  # mutate(distance_max = (my_seed_max_area-cell_size_target)) %>%
  filter(my_seed_max_area < cell_size_target) %>%
  slice_max(order_by = -abs(distance_mean), n = 20, by = file) %>%
  summarize(
    mean_G3 = mean(my_mean_G3),
    mean_G2 = mean(my_mean_G2),
    mean_noG = mean(my_mean_noG),
    n = mean(my_number_of_seeds),
    nuclei = mean(nuclei),
    .by = file)

```

### set parameters and input

```{r}

#summarized_thp1
#summarized_c2c12
#summarized_a172
#summarized_a172_13
#summarized_a549
#summarized_a549_13


```
